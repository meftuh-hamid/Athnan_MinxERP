/// <reference path="Item.js" />
Ext.ns('Ext.erp.ux.item');
/**
* @desc      Item registration form
* @author    Meftuh Mohammed
* @copyright (c) 2010, Cybersoft
* @date      January 14, 2011
* @namespace Ext.erp.ux.item
* @class     Ext.erp.ux.item.Form
* @extends   Ext.form.FormPanel
*/
Ext.erp.ux.item.Form = function (config) {
    Ext.erp.ux.item.Form.superclass.constructor.call(this, Ext.apply({
        api: {
            load: Item.Get,
            submit: Item.Save
        },
        paramOrder: ['id'],
        defaults: {
            anchor: '95%',
            labelStyle: 'text-align:right;',
            msgTarget: 'side'
        },
        id: 'item-form',
        padding: 5,
        labelWidth: 115,
        autoHeight: true,
        border: false,
        loadDocument: function () {

            Item.GetDocumentNo(function (result) {
                var form = Ext.getCmp('item-form').getForm();
                if (result.data.IsAutoGeneratedCode=="true")
                {
                    form.findField('Code').setDisabled(true);
                    form.findField('Code').allowBlank=true;
                }
                else
                {
                    form.findField('Code').setDisabled(false);
                    form.findField('Code').allowBlank = false;
                }
  
            });


        },
        baseCls: 'x-plain',
        items: [{
            layout: 'column',
            border: false,
            bodyStyle: 'background-color:transparent;',
            defaults: {
                border: false,
                bodyStyle: 'background-color:transparent;',
                layout: 'form'
            },
            items: [{
                columnWidth: .50,
                labelWidth: 130,
                defaults: {
                    anchor: '95%'
                },
                items: [{
                    name: 'Id',
                    xtype: 'hidden'
                }, {
                    name: 'MeasurementUnitId',
                    xtype: 'hidden'
                }, {
                    name: 'ItemTypeId',
                    xtype: 'hidden'
                }, {
                    name: 'ItemCategoryId',
                    xtype: 'hidden'
                }, {
                    name: 'TaxRateIds',
                    xtype: 'hidden'
                }, {
                    name: 'TaxRateIds',
                    xtype: 'hidden'
                }, {
                    name: 'CreatedAt',
                    xtype: 'hidden'
                },
                {
                    name: 'ItemCategory',
                    xtype: 'textfield',
                    fieldLabel: 'Item Category',
                    width: 200,
                    allowBlank: false,
                    disabled: true
                }, {
                    name: 'Name',
                    xtype: 'textarea',
                    fieldLabel: 'Description',
                    width: 100,
                    readOnly: false,
                    allowBlank: false
                }, {
                    name: 'Code',
                    xtype: 'textfield',
                    fieldLabel: 'Item Code',
                    width: 100,
                    readOnly: false,
                    allowBlank: false
                }, {
                    name: 'PartNumber',
                    xtype: 'textfield',
                    fieldLabel: 'Part Number',
                    width: 100,
                    allowBlank: true
                },{
                    hiddenName: 'MeasurementUnit',
                    xtype: 'combo',
                    fieldLabel: 'Unit',
                    triggerAction: 'all',
                    mode: 'remote',
                    editable: false,
                    forceSelection: true,
                    emptyText: '---Select---',
                    allowBlank: false,
                    store: new Ext.data.DirectStore({
                        reader: new Ext.data.JsonReader({
                            successProperty: 'success',
                            idProperty: 'Id',
                            root: 'data',
                            fields: ['Id', 'Name']
                        }),
                        autoLoad: true,
                        api: { read: Psms.GetMeasurementUnit }
                    }),
                    valueField: 'Id',
                    displayField: 'Name' ,
                    listeners: {
                    select: function (cmb, rec, idx) {
                        var form = Ext.getCmp('item-form').getForm();
                        form.findField("MeasurementUnitId").setValue(rec.id);
                          },
                      }
                }, {
                    name: 'ItemType',
                    hiddenName: 'ItemType',
                    xtype: 'combo',
                    fieldLabel: 'Item Type',
                    anchor: '95%',
                    triggerAction: 'all',
                    mode: 'local',
                    width: 100,
                    editable: false,
                    typeAhead: true,
                    forceSelection: true,
                    selectOnFocus: true,
                    emptyText: '---Select---',
                    allowBlank: false,
                    store: new Ext.data.DirectStore({
                        reader: new Ext.data.JsonReader({
                            successProperty: 'success',
                            idProperty: 'Id',
                            root: 'data',
                            fields: ['Id', 'Name']
                        }),
                        autoLoad: true,
                        api: { read: Psms.GetItemType }
                    }),
                    valueField: 'Id',
                    displayField: 'Name',
                    listeners: {
                        select: function (cmb, rec, idx) {
                            var form = Ext.getCmp('item-form').getForm();
                            form.findField("ItemTypeId").setValue(rec.id);
                        },
                    }
                }, {
                    name: 'Brand',
                    xtype: 'textfield',
                    fieldLabel: 'Brand',
                    width: 100,
                    allowBlank: true
                }, ]
            }, {
                columnWidth: .50,
                labelWidth: 120,
                defaults: {
                    anchor: '95%'
                },
                items: [ {
                    name: 'BarCode',
                    xtype: 'textfield',
                    fieldLabel: 'BarCode',
                    width: 100,
                    allowBlank: true
                }, {
                    name: 'IsActive',
                    checked: true,
                    xtype: 'checkbox',
                    fieldLabel: 'Is Active?',
                    width: 100,
                    readOnly: false,
                    allowBlank: true,
                    checked: false
                }, {
                    xtype: 'compositefield',
                    fieldLabel: 'Tax',
                    defaults: {
                        flex: 1
                    },
                    items: [
                        {
                            name: 'TaxRateDescription',
                            xtype: 'textarea',
                            fieldLabel: 'Tax',
                            allowBlank: true,
                            height: 50,
                            readOnly: false
                        },
                    {
                        xtype: 'button',
                        width: 30,
                        iconCls: 'icon-add',
                        handler: function () {
                            var form = Ext.getCmp('item-form').getForm();
                            new Ext.erp.ux.taxPicker.Window({
                                targetForm: form,
                            }).show();

                        }
                    }
                    ]
                }, {
                    name: 'ItemSpecification',
                    xtype: 'textarea',
                    fieldLabel: 'Item Specification',
                    width: 100,
                    readOnly: false,
                    allowBlank: true
                }]
            }]
        }]

    }, config));
};
Ext.extend(Ext.erp.ux.item.Form, Ext.form.FormPanel);
Ext.reg('item-form', Ext.erp.ux.item.Form);


/**
* @desc      Item registration form host window
* @author    Meftuh Mohammed
* @copyright (c) 2010, Cybersoft
* @date      November 01, 2010
* @namespace Ext.erp.ux.item
* @class     Ext.erp.ux.item.Window
* @extends   Ext.Window
*/
Ext.erp.ux.item.Window = function (config) {
    Ext.erp.ux.item.Window.superclass.constructor.call(this, Ext.apply({
        layout: 'fit',
        width: 750,
        id: 'item-window',
        autoHeight: true,
        closeAction: 'close',
        modal: true,
        resizable: false,
        buttonAlign: 'right',
        bodyStyle: 'padding:5px;',
        listeners: {
            show: function () {
                var form = Ext.getCmp('item-form').getForm();
                form.findField('Id').setValue(this.itemId);
                form.findField('ItemCategoryId').setValue(this.itemCategoryId);
                var nodeName = this.itemCategory.attributes.text;
                this.form.getForm().findField('ItemCategory').setValue(nodeName);
                if (typeof this.itemId != "undefined" && this.itemId!="") {
                    this.form.load({
                        params: { id: this.itemId },
                        success: function (form, action) {

                        },
                        failure: function (form, action) {
                        }
                    });
                }
                else
                {
                    Ext.getCmp('item-form').loadDocument();
                }
            },
            scope: this
        }
    }, config));
};
Ext.extend(Ext.erp.ux.item.Window, Ext.Window, {
    initComponent: function () {
        this.form = new Ext.erp.ux.item.Form();
        this.items = [this.form];
        this.bbar = ['->', {
            text: 'Save',
            iconCls: 'icon-save',

             handler: this.onSave,
            scope: this
        }, {
            text: 'Close',
            iconCls: 'icon-delete',
            handler: this.onClose,

            scope: this
        }];
        this.tools = [{
            id: 'refresh',
            qtip: 'Reset',
            handler: function () {
                this.form.getForm().reset();
            },
            scope: this
        }];
        Ext.erp.ux.item.Window.superclass.initComponent.call(this, arguments);
    },
    onSave: function () {
        var itemCategoryId = Ext.getCmp('item-tree').selectedUnitId;
         if (itemCategoryId!='')
        this.form.getForm().findField('ItemCategoryId').setValue(itemCategoryId);
        if (!this.form.getForm().isValid()) return;
        this.form.getForm().submit({
            waitMsg: 'Please wait...',
            success: function (form, action) {
                Ext.MessageBox.show({
                    title: 'Success',
                    msg: action.result.data,
                    buttons: Ext.Msg.OK,
                    icon: Ext.MessageBox.INFO,
                    scope: this
                });
                Ext.getCmp('item-form').getForm().reset();
                Ext.getCmp('item-paging').doRefresh();
                Ext.getCmp('item-window').close();
            },
            failure: function (form, action) {
                Ext.MessageBox.show({
                    title: 'Failure',
                    msg: action.result.data,
                    buttons: Ext.Msg.OK,
                    icon: Ext.MessageBox.INFO,
                    scope: this
                });
            }
        });
    },
    onClose: function () {
        this.close();
    }
});
Ext.reg('item-window', Ext.erp.ux.item.Window);

/**
* @desc      Item grid
* @author   Meftuh Mohammed
* @copyright (c) 2010, Cybersoft
* @date      November 01, 2010
* @namespace Ext.erp.ux.item
* @class     Ext.erp.ux.item.Grid
* @extends   Ext.grid.GridPanel
*/
var itemSelectionModel = new Ext.grid.CheckboxSelectionModel({
});
Ext.erp.ux.item.Grid = function (config) {
    Ext.erp.ux.item.Grid.superclass.constructor.call(this, Ext.apply({
        store: new Ext.data.DirectStore({
            directFn: Item.GetAll,
            paramsAsHash: false,
            paramOrder: 'start|limit|sort|dir|record',
            root: 'data',
            idProperty: 'Id',
            totalProperty: 'total',
            sortInfo: {
                field: 'Name',
                direction: 'ASC'
            },
            fields: ['Id', 'ItemCategory', 'Code', 'Name', 'InventoryUnit', 'ItemType', 'Supplier', 'Brand', 'IsActive', 'PartNumber', 'ItemSpecification', 'MeasurementUnit', 'Remark'],
            remoteSort: true,
            listeners: {
                beforeLoad: function () { Ext.getCmp('item-grid').body.mask('Loading...', 'x-mask-loading'); },
                load: function () { Ext.getCmp('item-grid').body.unmask(); },
                loadException: function () { Ext.getCmp('item-grid').body.unmask(); },
                scope: this
            }
        }),
        id: 'item-grid',
        pageSize: 30,
        //height: 550,
        stripeRows: true,
        border: false,
        sm: new Ext.grid.RowSelectionModel({
            singleSelect: true
        }),
        viewConfig: {
            forceFit: false,
            autoExpandColumn: 'Name',
            autoFill: true
        },
        sm:itemSelectionModel,
        columns: [{
            dataIndex: 'Id',
            header: 'Id',
            sortable: true,
            hidden: true,
            width: 100,
            menuDisabled: true
        }, itemSelectionModel, new Ext.grid.RowNumberer(),
         {
             dataIndex: 'IsActive',
             header: 'Is Active?',
             sortable: true,
             width: 70,
             menuDisabled: true,
             renderer: function (value, metaData, record, rowIndex, colIndex, store) {
                 if (value)
                     return '<img src="Content/images/app/yes.png"/>';
                 else
                     return '<img src="Content/images/app/no.png"/>';
             }
         }, {
            dataIndex: 'ItemCategory',
            header: 'Item Category',
            sortable: true,
            hidden:true,
            width: 100,
            menuDisabled: true
        }, {
            dataIndex: 'Name',
            header: 'Description',
            sortable: true,
            width: 200,
            menuDisabled: true
        }, {
            dataIndex: 'Code',
            header: 'Code',
            sortable: true,
            width: 100,
            menuDisabled: true
        }, {
            dataIndex: 'PartNumber',
            header: 'Part Number',
            sortable: true,
            width: 100,
            menuDisabled: true
        }, {
            dataIndex: 'ItemType',
            header: 'Item Type',
            sortable: true,
            width: 100,
            menuDisabled: true
        }, {
            dataIndex: 'Supplier',
            header: 'Supplier',
            sortable: true,
            width: 100,
            menuDisabled: true
        }, {
            dataIndex: 'Brand',
            header: 'Brand',
            sortable: true,
            width: 100,
            menuDisabled: true
        }, {
            dataIndex: 'MeasurementUnit',
            header: 'Unit',
            sortable: true,
            width: 100,
            menuDisabled: true
        }]
    }, config));
};
Ext.extend(Ext.erp.ux.item.Grid, Ext.grid.GridPanel, {
    initComponent: function () {
        this.tbar = [{
            xtype: 'button',
            text: 'Add',
            id: 'addItem',
            iconCls: 'icon-add',
            handler: function () {
                var tree = Ext.getCmp('item-tree');
                var itemCategoryId = tree.selectedUnitId;
                var selectedNode = tree.getSelectionModel().getSelectedNode();
                if (typeof itemCategoryId == "undefined" || itemCategoryId=="") {
                    Ext.MessageBox.show({
                        title: 'Select',
                        msg: 'You must select an Item Category.',
                        buttons: Ext.Msg.OK,
                        icon: Ext.MessageBox.INFO,
                        scope: this
                    });
                    return;
                }
                new Ext.erp.ux.item.Window({
                    itemId: '',
                    itemCategoryId: itemCategoryId,
                    itemCategory: selectedNode,
                    title: 'Add Item'
                }).show();
            }
        }, {
            xtype: 'tbseparator'
        }, {
            xtype: 'button',
            text: 'Edit',
            id: 'editItem',
            iconCls: 'icon-edit',
            handler: function () {
                var grid = Ext.getCmp('item-grid');
                var tree = Ext.getCmp('item-tree');
                var itemCategoryId = tree.selectedUnitId;
                var selectedNode = tree.getSelectionModel().getSelectedNode();
                if (!grid.getSelectionModel().hasSelection()) {
                    Ext.MessageBox.show({
                        title: 'Select',
                        msg: 'You must select a record to edit.',
                        buttons: Ext.Msg.OK,
                        icon: Ext.MessageBox.INFO,
                        scope: this
                    });
                    return;
                }
                var id = grid.getSelectionModel().getSelected().get('Id');
                new Ext.erp.ux.item.Window({
                    itemId: id,
                    itemCategoryId: itemCategoryId,
                    itemCategory: selectedNode,
                    title: 'Edit Item'
                }).show();
            }
        },   {
            xtype: 'tbseparator'
        },  {
            xtype: 'button',
            text: 'Delete',
            iconCls: 'icon-delete',
            hidden: false,
            disabled: !Ext.erp.ux.Reception.getPermission('Item', 'CanDelete'),
            handler: this.onDeleteClick
        }, {
            xtype: 'tbseparator'
        }, {
            xtype: 'button',
            text: 'Alternative Item',
            id: 'addAlternativeItem',
            iconCls: 'icon-document',
            handler: function () {
                var grid = Ext.getCmp('item-grid');
                if (!grid.getSelectionModel().hasSelection()) return;
                var itemId = grid.getSelectionModel().getSelected().get('Id');
                new Ext.erp.ux.alternativeItem.Window({
                    itemId: itemId,
                    title: 'alternative Items'
                }).show();
            }
        }, {
            xtype: 'tbseparator'
        }, {
            xtype: 'button',
            text: 'Item Units',
            id: 'addItemUnits',
            iconCls: 'icon-unit',
            handler: function () {
                var grid = Ext.getCmp('item-grid');
                if (!grid.getSelectionModel().hasSelection()) return;
                var itemId = grid.getSelectionModel().getSelected().get('Id');
                var inventoryUnit = grid.getSelectionModel().getSelected().get('InventoryUnit');
                if (inventoryUnit == "" || typeof inventoryUnit == 'undefined') inventoryUnit = 0;

                new Ext.erp.ux.itemUnit.Window({
                    itemId: itemId,
                    inventoryUnit:inventoryUnit,
                    title: 'Item Units'
                }).show();
            }
        }, {
            xtype: 'tbseparator'
        }, {
            xtype: 'button',
            text: 'Change Category',
            id: 'changeItemCategory',
            iconCls: 'icon-change',
            handler: this.onChangeCategoryClick
        }, {
            xtype: 'tbseparator',
            hidden:true,
        }, {
            xtype: 'button',
            text: 'Account Mapping',
            id: 'addAccountMapping',
            hidden:true,
            iconCls: 'icon-accept',
            handler: function () {
                var grid = Ext.getCmp('item-grid');
                if (!grid.getSelectionModel().hasSelection()) return;
                var itemId = grid.getSelectionModel().getSelected().get('Id');
                new Ext.erp.ux.accountMapping.Window({
                    itemId: itemId,
                    itemCategoryId: '',
                    title: 'Account Mapping'
                }).show();
            }
        }, {
            xtype: 'tbseparator',
            hidden: true,
        }, {
            xtype: 'button',
            text: 'Package',
            id: 'addpackage',
            hidden: true,
            iconCls: 'icon-accept',
            handler: function () {
                var grid = Ext.getCmp('item-grid');
                if (!grid.getSelectionModel().hasSelection()) return;
                var itemId = grid.getSelectionModel().getSelected().get('Id');
                new Ext.erp.ux.itemPackage.Window({
                    itemId: itemId,
                    itemCategoryId: '',
                    title: 'Item Package'
                }).show();
            }
        }, {
            xtype: 'tbseparator'
        }, {
            xtype: 'button',
            text: 'Barcode',
            iconCls: 'icon-barcode',
            handler: this.onBarcodeClick
        }, {
            xtype: 'tbseparator'
        }, {
            xtype: 'button',
            text: 'Print Code',
            iconCls: 'icon-accept',
            handler: this.onPrintItemCodeClick
        }, {
            xtype: 'tbseparator'
        }, {
            xtype: 'button',
            text: 'Import',
            iconCls: 'icon-excel',
            disabled: false,
            handler: function () {
                var detailGrid = Ext.getCmp('item-grid');
                new Ext.erp.ux.documentAttachment.Window({
                    targetGrid: detailGrid,
                    type: "Item"
                }).show();
            }
        }, {
            xtype: 'tbfill'
        }, {
            xtype: 'textfield',
            emptyText: 'Type Search text here and press "Enter"',
            submitEmptyText: false,
            enableKeyEvents: true,
            style: {
                borderRadius: '25px',
                padding: '0 10px',
                width: '200px'
            },
            listeners: {
                specialKey: function (field, e) {
                    if (e.getKey() == e.ENTER) {
                        var tree = Ext.getCmp('item-tree');
                       
                        var itemCategoryId = tree.selectedUnitId;
                        var grid = Ext.getCmp('item-grid');
                        grid.store.baseParams['record'] = Ext.encode({ itemCategoryId: itemCategoryId, searchText: field.getValue() });
                        grid.store.load({ params: { start: 0, limit: grid.pageSize} });
                    }
                },
                Keyup: function (field, e) {
                    var tree = Ext.getCmp('item-tree');
                    var itemCategoryId = tree.selectedUnitId;
                    if (field.getValue() == '') {
                        var grid = Ext.getCmp('item-grid');
                        grid.store.baseParams['record'] = Ext.encode({ itemCategoryId: itemCategoryId, searchText: field.getValue() });
                        grid.store.load({ params: { start: 0, limit: grid.pageSize} });
                    }
                }
            }
        }]
        this.bbar = new Ext.PagingToolbar({
            id: 'item-paging',
            store: this.store,
            displayInfo: true,
            pageSize: this.pageSize
        });
        Ext.erp.ux.item.Grid.superclass.initComponent.apply(this, arguments);
    },
    onPrintItemCodeClick: function () {

        var grid = Ext.getCmp('item-grid');
        if (!grid.getSelectionModel().hasSelection()) return;

        var voucherId = grid.getSelectionModel().getSelected().get('Id');
        var parameter = 'width=900,height=700,toolbar=yes,location=yes,directories=yes,status=yes,menubar=yes,scrollbars=yes,copyhistory=yes,resizable=yes';

        window.open('Reports/ErpReportViewer.aspx?rt=PreviewItemCode&id=' + voucherId, 'PreviewItemCode', parameter);

    },
    onDeleteClick: function () {
        var grid = Ext.getCmp('item-grid');
        var id = grid.getSelectionModel().getSelected().get('Id');

        Ext.MessageBox.show({
            title: 'Delete',
            msg: 'Are you sure you want to delete the selected item',
            buttons: {
                ok: 'Yes',
                no: 'No'
            },
            icon: Ext.MessageBox.QUESTION,
            scope: this,
            animEl: 'delete',
            fn: function (btn) {
                if (btn == 'ok') {
                    Item.Delete(id, function (result) {
                        if (result.success) {
                            Ext.getCmp('item-paging').doRefresh();
                            Ext.MessageBox.show({
                                title: 'Sucesss',
                                msg: result.data,
                                buttons: Ext.Msg.OK,
                                      scope: this
                            });
                        }
                        else {
                            Ext.MessageBox.show({
                                title: 'Error',
                                msg: result.data,
                                buttons: Ext.Msg.OK,
                                icon: Ext.MessageBox.ERROR,
                                scope: this
                            });
                        }
                    }, this);
                }
            }
        });
    },
    onChangeCategoryClick: function () {
        var grid = Ext.getCmp('item-grid');
        var id = grid.getSelectionModel().getSelected().get('Id');
        if (!grid.getSelectionModel().hasSelection()) return;

        Ext.MessageBox.show({
            title: 'Delete',
            msg: 'Are you sure you want to Change category for the selected items',
            buttons: {
                ok: 'Yes',
                no: 'No'
            },
            icon: Ext.MessageBox.QUESTION,
            scope: this,
            animEl: 'delete',
            fn: function (btn) {
                if (btn == 'ok') {
                    var selectedItems = grid.getSelectionModel().getSelections();
                    var itemIds = "";
                    for (var i = 0; i < selectedItems.length; i++) {
                        var item = selectedItems[i];
                        itemIds = itemIds + ',' + item.get("Id");
                    }
                    new Ext.erp.ux.itemCategoryChange.Window({
                        itemIds: itemIds,
                        title: 'Item Category Change'
                    }).show();
                }
            }
        });
    },
    onBarcodeClick: function () {
        var grid = Ext.getCmp('item-grid');
        if (!grid.getSelectionModel().hasSelection()) return;
        var itemId = grid.getSelectionModel().getSelected().get('Id');
        new Ext.erp.ux.itemBarcode.Window({
            itemId: itemId,
            title: 'Barcode'
        }).show();

    },
});
Ext.reg('item-grid', Ext.erp.ux.item.Grid);

/**
* @desc      Item tree
* @author    Meftuh Mohammed
* @copyright (c) 2011, Cybersoft
* @date      December 01, 2011
* @namespace Ext.erp.ux.item
* @class     Ext.erp.ux.item.Tree
* @extends   Ext.tree.TreePanel
*/
Ext.erp.ux.item.Tree = function (config) {
    Ext.erp.ux.item.Tree.superclass.constructor.call(this, Ext.apply({
        id: 'item-tree',
        loader: new Ext.tree.TreeLoader({
            directFn: ItemCategory.PopulateTree
        }),
        selectedUnitId: 0,
        selectedUnitTypeId: 0,
        border: false,
        rootVisible: true,
        lines: true,
        autoScroll: true,
        stateful: false,
        root: {
            text: 'Item Categories',
            id: 'root-unit'
        },
        listeners: {
            click: function (node, e) {
                e.stopEvent();
                node.select();
                if (node.isExpandable()) {
                    node.reload();
                }      
                node.getOwnerTree().selectedUnitTypeId = node.attributes.id == 'root-unit' ? 0 : node.attributes.unitTypeId;
                node.getOwnerTree().selectedUnitId = node.attributes.id == 'root-unit' ? 0 : node.attributes.id;
                var itemGrid = Ext.getCmp('item-grid');
                var selectedUnit = node.attributes.id == 'root-unit' ? '' : '[' + node.attributes.text + ']';
                Ext.getCmp('selected-unit').setValue(selectedUnit);
                itemGrid.store.baseParams['record'] = Ext.encode({ itemCategoryId: node.id });
                itemGrid.store.baseParams['loadMode'] = 'simple';
                itemGrid.store.load({ params: { start: 0, limit: itemGrid.pageSize} });
            },
            contextmenu: function (node, e) {
                node.select();
                node.getOwnerTree().selectedUnitTypeId = node.attributes.id == 'root-unit' ? 0 : node.attributes.unitTypeId;
                node.getOwnerTree().selectedUnitId = node.attributes.id == 'root-unit' ? 0 : node.attributes.id;
                var selectedUnit = node.attributes.id == 'root-unit' ? '' : '[' + node.attributes.text + ']';
                Ext.getCmp('selected-unit').setValue(selectedUnit);
                var itemGrid = Ext.getCmp('item-grid');
                itemGrid.store.baseParams['record'] = Ext.encode({ itemCategoryId: node.id });
                itemGrid.store.baseParams['loadMode'] = 'simple';
                itemGrid.store.load({ params: { start: 0, limit: itemGrid.pageSize} });
            },
            expand: function (p) {
                p.syncSize();
            }
        }
    }, config));
}
Ext.extend(Ext.erp.ux.item.Tree, Ext.tree.TreePanel, {
    initComponent: function () {
        this.tbar = [{
            xtype: 'displayfield',
            id: 'selected-unit',
            style: 'font-weight: bold'
        }, {
            xtype: 'tbfill'
        }, {
            xtype: 'button',
            id: 'expand-all-item',
            iconCls: 'icon-expand-all',
            tooltip: 'Expand All',
            handler: function () {
                Ext.getCmp('item-tree').expandAll();
            }
        }, {
            xtype: 'tbseparator'
        }, {
            xtype: 'button',
            id: 'collapse-all-item',
            iconCls: 'icon-collapse-all',
            tooltip: 'Collapse All',
            handler: function () {
                Ext.getCmp('item-tree').collapseAll();
            }
        }];
        Ext.erp.ux.item.Tree.superclass.initComponent.call(this, arguments);
    }
});
Ext.reg('item-tree', Ext.erp.ux.item.Tree);

/**
* @desc      Item panel
* @author    Meftuh Mohammed
* @copyright (c) 2010, Cybersoft
* @date      November 01, 2010
* @version   $Id: Item.js, 0.1
* @namespace Ext.erp.ux.item
* @class     Ext.erp.ux.item.Panel
* @extends   Ext.Panel
*/
Ext.erp.ux.item.Panel = function (config) {
    Ext.erp.ux.item.Panel.superclass.constructor.call(this, Ext.apply({
        layout: 'fit',
        border: false
    }, config));
};
Ext.extend(Ext.erp.ux.item.Panel, Ext.Panel, {
    initComponent: function () {
        this.tree = new Ext.erp.ux.item.Tree();
        this.grid = new Ext.erp.ux.item.Grid();
        this.items = [{
            layout: 'border',
            border: false,
            items: [{
                region: 'west',
                border: true,
                width: 300,
                minSize: 200,
                maxSize: 400,
                layout: 'fit',
                margins: '0 3 0 0',
                items: [this.tree]
            }, {
                region: 'center',
                border: false,
                layout: 'fit',
                items: [{
                    layout: 'vbox',
                    layoutConfig: {
                        type: 'hbox',
                        align: 'stretch',
                        pack: 'start'
                    },
                    defaults: {
                        flex: 1
                    },
                    items: [this.grid]
                }]
            }]
        }];
        Ext.erp.ux.item.Panel.superclass.initComponent.apply(this, arguments);
    }
});
Ext.reg('item-panel', Ext.erp.ux.item.Panel);