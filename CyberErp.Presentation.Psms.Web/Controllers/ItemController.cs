using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using CyberErp.Data.Model;
using System.Data.Objects;
using Ext.Direct.Mvc;
using CyberErp.Business.Component.Psms;
using CyberErp.Presentation.Psms.Web.Classes;
using Newtonsoft.Json;
using System.Transactions;
using System.Data.Entity;
using System.IO;
using Presentation.Psms.Web.Classes;

namespace CyberErp.Presentation.Psms.Web.Controllers
{
    public class ItemController : DirectController
    {
        #region Members

        private readonly DbContext _context;
        private readonly Item _item;
        private readonly BaseModel<psmsInventoryRecord> _inventoryRecord;
        private readonly BaseModel<psmsItemCategory> _itemCategory;
        private readonly BaseModel<psmsItemAlternative> _itemAlternative;
        private readonly BaseModel<psmsItemUnit> _itemUnit;
        private readonly BaseModel<psmsSetting> _setting;
        private readonly BaseModel<coreFiscalYear> _fiscalYear;
        private readonly BaseModel<psmsItemPackage> _itemPackage;
    
        #endregion

        #region Constructor

        public ItemController()
        {
            _context = new ErpEntities(Constants.ConnectionString);
            _item = new Item(_context);
            _inventoryRecord = new BaseModel<psmsInventoryRecord>(_context);
            _itemCategory = new BaseModel<psmsItemCategory>(_context);
            _itemAlternative = new BaseModel<psmsItemAlternative>(_context);
            _itemUnit = new BaseModel<psmsItemUnit>(_context);
            _setting = new BaseModel<psmsSetting>(_context);
            _fiscalYear = new BaseModel<coreFiscalYear>(_context);
            _itemPackage = new BaseModel<psmsItemPackage>(_context);
        }

        #endregion

        #region Action
        public ActionResult GetDocumentNo()
        {
            var objItem =_setting.Find(o=>o.Name==Constants.autoCode_setting_Name);
            var item = new
            {
                IsAutoGeneratedCode = objItem!=null?objItem.Value:"false"
            };
            return this.Direct(new
            {
                 data = item
            });
        }
  
        public ActionResult Get(Guid id)
        {
            var objItem = _item.Get(o=>o.Id==id);
             var item = new
            {
                objItem.Id,
                objItem.Name,
                objItem.Code,
                objItem.PartNumber,
                objItem.MeasurementUnitId,
                MeasurementUnit = objItem.lupMeasurementUnit.Name,
                objItem.InventoryUnit,
                objItem.ItemSpecification,
                objItem.ABC,
                objItem.SDE,
                objItem.Weight,
                objItem.Supplier,
                objItem.IsActive,
                objItem.BarCode,
                objItem.Volume,
                objItem.Brand,
                objItem.FSN,
                objItem.IsLOTItem,
                objItem.IsSerialItem,
                objItem.IsHazardous,
                objItem.Remark,
                objItem.ItemTypeId,
                ItemType=objItem.lupItemType.Name,
                objItem.ItemCategoryId,
                objItem.TaxRateIds,
                objItem.TaxRateDescription,
                ItemCategory = objItem.psmsItemCategory.Name,
                objItem.CreatedAt
            };
            return this.Direct(new
            {
                success = true,
                data = item
            });
        }
        public ActionResult GetAll(int start, int limit, string sort, string dir, string record)
        {
            var hashtable = JsonConvert.DeserializeObject<Hashtable>(record);
            Guid itemCategoryId;
            Guid.TryParse(hashtable["itemCategoryId"].ToString(), out itemCategoryId);
            var searchText = hashtable["searchText"] != null ? hashtable["searchText"].ToString() : "";

            var filtered = _item.GetAll().AsQueryable();
            if (itemCategoryId != Guid.Empty) filtered = filtered.Where(i => i.ItemCategoryId == itemCategoryId);
            filtered = searchText != "" ? filtered.Where(s =>
             
                s.Code.ToUpper().Contains(searchText.ToUpper()) ||
                s.Name.ToUpper().Contains(searchText.ToUpper()) ||
                s.psmsItemCategory.Name.ToUpper().Contains(searchText.ToUpper()) ||
                s.lupItemType.Name.ToUpper().Contains(searchText.ToUpper()) ||
                s.PartNumber.ToUpper().Contains(searchText.ToUpper()) ||
                s.Brand.ToUpper().Contains(searchText.ToUpper()) ||
                s.Supplier.ToUpper().Contains(searchText.ToUpper()) ||
                s.BarCode.ToUpper().Contains(searchText.ToUpper()) ||
                s.lupMeasurementUnit.Name.ToUpper().Contains(searchText.ToUpper())) : filtered;
            switch (sort)
            {
               
                case "Name":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.Name) : filtered.OrderByDescending(u => u.Name);
                    break;
                case "Code":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.Code) : filtered.OrderByDescending(u => u.Code);
                    break;
                case "PartNumber":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.PartNumber) : filtered.OrderByDescending(u => u.PartNumber);
                    break;
             
                case "Type":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.lupItemType.Name) : filtered.OrderByDescending(u => u.lupItemType.Name);
                    break;
                case "ItemCategory":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.psmsItemCategory.Name ) : filtered.OrderByDescending(u => u.psmsItemCategory.Name );
                    break;
                case "Supplier":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.Supplier) : filtered.OrderByDescending(u => u.Supplier);
                    break;
                case "Brand":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.Brand) : filtered.OrderByDescending(u => u.Brand);
                    break;
                case "IsHazardous":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.IsHazardous) : filtered.OrderByDescending(u => u.IsHazardous);
                    break;
                case "IsSerialItem":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.IsSerialItem) : filtered.OrderByDescending(u => u.IsSerialItem);
                    break;
                case "IsLOTItem":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.IsLOTItem) : filtered.OrderByDescending(u => u.IsLOTItem);
                    break;
                case "IsActive":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.IsActive) : filtered.OrderByDescending(u => u.IsActive);
                    break;
          
                case "Remark":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.Remark) : filtered.OrderByDescending(u => u.Remark);
                    break;
                default:
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.CreatedAt) : filtered.OrderByDescending(u => u.CreatedAt);
                    break;
            }
            var count = filtered.Count();
            filtered = filtered.Skip(start).Take(limit);
        
            var items = filtered.Select(item => new
            {
                item.Id,
                item.Name,
                item.Code,
                item.PartNumber,
                MeasurementUnit = item.lupMeasurementUnit.Name,
                item.InventoryUnit,
                item.ItemSpecification,
                item.ABC,
                item.SDE,
                item.FSN,
                item.IsSerialItem,
                item.IsLOTItem,
                item.IsHazardous,
                item.IsActive,
                item.Brand,
                item.Supplier,
                item.Remark,
                ItemType = item.lupItemType.Name,
                ItemCategory = item.psmsItemCategory.Name,
                item.CreatedAt
            }).ToList();

            var result = new
            {
                total = count,
                data = items
            };
            return this.Direct(result);
        }
        public ActionResult GetAllSerialItem(int start, int limit, string sort, string dir, string record)
        {
            var hashtable = JsonConvert.DeserializeObject<Hashtable>(record);
            var searchText = hashtable["searchText"] != null ? hashtable["searchText"].ToString() : "";

            var filtered = _item.GetAll().AsQueryable().Where(i => i.IsSerialItem.Value);
           
            filtered = searchText != "" ? filtered.Where(s =>
             
                s.Code.ToUpper().Contains(searchText.ToUpper()) ||
                s.Name.ToUpper().Contains(searchText.ToUpper()) ||
                s.psmsItemCategory.Name.ToUpper().Contains(searchText.ToUpper()) ||
                s.lupItemType.Name.ToUpper().Contains(searchText.ToUpper()) ||
                s.PartNumber.ToUpper().Contains(searchText.ToUpper()) ||
                s.lupMeasurementUnit.Name.ToUpper().Contains(searchText.ToUpper())
                ) : filtered;
            switch (sort)
            {
               
                case "Name":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.Name) : filtered.OrderByDescending(u => u.Name);
                    break;
                case "Code":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.Code) : filtered.OrderByDescending(u => u.Code);
                    break;
                case "PartNumber":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.PartNumber) : filtered.OrderByDescending(u => u.PartNumber);
                    break;
             
                case "Type":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.lupItemType.Name) : filtered.OrderByDescending(u => u.lupItemType.Name);
                    break;
                case "ItemCategory":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.psmsItemCategory.Name ) : filtered.OrderByDescending(u => u.psmsItemCategory.Name );
                    break;
                case "Supplier":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.Supplier) : filtered.OrderByDescending(u => u.Supplier);
                    break;
                case "Brand":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.Brand) : filtered.OrderByDescending(u => u.Brand);
                    break;
                case "IsHazardous":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.IsHazardous) : filtered.OrderByDescending(u => u.IsHazardous);
                    break;
                case "IsSerialItem":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.IsSerialItem) : filtered.OrderByDescending(u => u.IsSerialItem);
                    break;
                case "IsLOTItem":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.IsLOTItem) : filtered.OrderByDescending(u => u.IsLOTItem);
                    break;
                case "IsActive":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.IsActive) : filtered.OrderByDescending(u => u.IsActive);
                    break;
                case "Remark":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.Remark) : filtered.OrderByDescending(u => u.Remark);
                    break;
                default:
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.CreatedAt) : filtered.OrderByDescending(u => u.CreatedAt);
                    break;
            }
            var count = filtered.Count();
            filtered = filtered.Skip(start).Take(limit);
        
            var items = filtered.Select(item => new
            {
                item.Id,
                item.Name,
                item.Code,
                item.PartNumber,
                UnitId=item.MeasurementUnitId,
                MeasurementUnit = item.lupMeasurementUnit.Name,
                item.InventoryUnit,
                item.ItemSpecification,
                item.ABC,
                item.SDE,
                item.FSN,
                item.IsActive,
                item.Brand,
                item.Supplier,
                item.IsSerialItem,
                item.IsLOTItem,
                item.IsHazardous,
                item.Remark,
                ItemType = item.lupItemType.Name,
                ItemCategory = item.psmsItemCategory.Name,
                item.CreatedAt
            }).ToList();

            var result = new
            {
                total = count,
                data = items
            };
            return this.Direct(result);
        }

        public ActionResult GetAllLOTItem(int start, int limit, string sort, string dir, string record)
        {
            var hashtable = JsonConvert.DeserializeObject<Hashtable>(record);
            var searchText = hashtable["searchText"] != null ? hashtable["searchText"].ToString() : "";

            var filtered = _item.GetAll().AsQueryable().Where(i => i.IsLOTItem);

            filtered = searchText != "" ? filtered.Where(s =>

                s.Code.ToUpper().Contains(searchText.ToUpper()) ||
                s.Name.ToUpper().Contains(searchText.ToUpper()) ||
                s.psmsItemCategory.Name.ToUpper().Contains(searchText.ToUpper()) ||
                s.lupItemType.Name.ToUpper().Contains(searchText.ToUpper()) ||
                s.PartNumber.ToUpper().Contains(searchText.ToUpper()) ||
                s.lupMeasurementUnit.Name.ToUpper().Contains(searchText.ToUpper())
                ) : filtered;
            switch (sort)
            {

                case "Name":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.Name) : filtered.OrderByDescending(u => u.Name);
                    break;
                case "Code":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.Code) : filtered.OrderByDescending(u => u.Code);
                    break;
                case "PartNumber":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.PartNumber) : filtered.OrderByDescending(u => u.PartNumber);
                    break;

                case "Type":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.lupItemType.Name) : filtered.OrderByDescending(u => u.lupItemType.Name);
                    break;
                case "ItemCategory":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.psmsItemCategory.Name) : filtered.OrderByDescending(u => u.psmsItemCategory.Name);
                    break;

                case "Supplier":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.Supplier) : filtered.OrderByDescending(u => u.Supplier);
                    break;
                case "Brand":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.Brand) : filtered.OrderByDescending(u => u.Brand);
                    break;
                case "IsHazardous":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.IsHazardous) : filtered.OrderByDescending(u => u.IsHazardous);
                    break;
                case "IsSerialItem":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.IsSerialItem) : filtered.OrderByDescending(u => u.IsSerialItem);
                    break;
                case "IsLOTItem":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.IsLOTItem) : filtered.OrderByDescending(u => u.IsLOTItem);
                    break;
                case "IsActive":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.IsActive) : filtered.OrderByDescending(u => u.IsActive);
                    break;

                case "Remark":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.Remark) : filtered.OrderByDescending(u => u.Remark);
                    break;
                default:
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.CreatedAt) : filtered.OrderByDescending(u => u.CreatedAt);
                    break;
            }
            var count = filtered.Count();
            filtered = filtered.Skip(start).Take(limit);

            var items = filtered.Select(item => new
            {
                item.Id,
                item.Name,
                item.Code,
                item.PartNumber,
                UnitId = item.MeasurementUnitId,
                MeasurementUnit = item.lupMeasurementUnit.Name,
                item.InventoryUnit,
                item.ItemSpecification,
                item.ABC,
                item.SDE,
                item.FSN,
                item.IsSerialItem,
                item.IsLOTItem,
                item.IsHazardous,
                item.IsActive,
                item.Brand,
                item.Supplier,
                item.Remark,
                ItemType = item.lupItemType.Name,
                ItemCategory = item.psmsItemCategory.Name,
                item.CreatedAt
            }).ToList();

            var result = new
            {
                total = count,
                data = items
            };
            return this.Direct(result);
        }


        public ActionResult GetExpiringReorder(int start, int limit, string sort, string dir, string record)
        {
            var hashtable = JsonConvert.DeserializeObject<Hashtable>(record);
          
            var fiscalYearId = _fiscalYear.GetAll().Where(o => o.IsActive == true && o.IsClosed == false).FirstOrDefault().Id;
            var filtered = _inventoryRecord.GetAll().AsQueryable().Where(i => i.FiscalYearId == fiscalYearId && i.IsClosed == false && ((i.RunningQuantity < i.ReorderLevel && i.ReorderLevel > 0) || (i.RunningQuantity > i.MaximumLevel && i.MaximumLevel > 0) || (i.RunningQuantity < i.MinimumLevel && i.MinimumLevel > 0)));

            var searchText = hashtable["searchText"] != null ? hashtable["searchText"].ToString() : "";

         
            filtered = searchText != "" ? filtered.Where(s =>

                s.psmsItem.Code.ToUpper().Contains(searchText.ToUpper()) ||
                s.psmsItem.Name.ToUpper().Contains(searchText.ToUpper()) ||
                s.psmsItem.psmsItemCategory.Name.ToUpper().Contains(searchText.ToUpper()) ||
                s.psmsItem.lupItemType.Name.ToUpper().Contains(searchText.ToUpper()) ||
                s.psmsItem.PartNumber.ToUpper().Contains(searchText.ToUpper()) ||
                s.psmsStore.Name.ToUpper().Contains(searchText.ToUpper()) ||
                s.psmsItem.Brand.ToUpper().Contains(searchText.ToUpper())
                ) : filtered;
            switch (sort)
            {

               
                case "ItemCategory":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.psmsItem.psmsItemCategory.Name) : filtered.OrderByDescending(u => u.psmsItem.psmsItemCategory.Name);
                    break;
                case "Name":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.psmsItem.Name) : filtered.OrderByDescending(u => u.psmsItem.Name);
                    break;
                case "Code":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.psmsItem.Code) : filtered.OrderByDescending(u => u.psmsItem.Code);
                    break;
                case "Type":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.RunningQuantity < u.ReorderLevel ? "Reorder Level" : u.RunningQuantity > u.MaximumLevel ? "Maximum Level" : u.RunningQuantity < u.MinimumLevel ? "Minimum Level" : "") : filtered.OrderByDescending(u => u.RunningQuantity < u.ReorderLevel ? "Reorder Level" : u.RunningQuantity > u.MaximumLevel ? "Maximum Level" : u.RunningQuantity < u.MinimumLevel ? "Minimum Level" : "");
                    break;
                case "Store":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.psmsStore.Name) : filtered.OrderByDescending(u => u.psmsStore.Name);
                    break;
                default:
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.CreatedAt) : filtered.OrderByDescending(u => u.CreatedAt);
                    break;
            }
            var count = filtered.Count();
            filtered = filtered.Skip(start).Take(limit);
           
            var items = filtered.Select(item => new
            {
                item.Id,
                Type = item.RunningQuantity < item.ReorderLevel ? "Reorder Level" : item.RunningQuantity > item.MaximumLevel ? "Maximum Level" : item.RunningQuantity < item.MinimumLevel?"Minimum Level":"",
                ItemCategory = item.psmsItem.ItemCategoryId != null ? item.psmsItem.psmsItemCategory.Name : "",
                Name = item.psmsItem.Name,
                Code = item.psmsItem.Code,
                item.ReorderLevel,
                item.RunningQuantity,
                Store = item.psmsStore.Name
            }).ToList();
            var result = new
            {
                total = count,
                data = items
            };
            return this.Direct(result);
        }
        public ActionResult PopulateTree(string nodeId)
        {
            bool isLeafNode;
            Guid selectedNodeId;
            Guid.TryParse(nodeId, out selectedNodeId);
           
            var itemCategories = selectedNodeId !=Guid.Empty
                            ?_itemCategory.GetAll().AsQueryable().Where(b => b.ParentId == selectedNodeId)
                            : _itemCategory.GetAll().AsQueryable().Where(b => b.ParentId == null);
          
            var filtered = new ArrayList();
            foreach (var itemCategory in itemCategories)
            {
                isLeafNode = !HasChildCategories(itemCategory.Id);
                filtered.Add(new
                {
                    id = itemCategory.Id,
                    text = itemCategory.Name,
                    href = string.Empty,
                    leaf = isLeafNode,
                    iconCls = isLeafNode ? "icon-green-bullet" : ""
                });
            }
            return this.Direct(filtered.ToArray());
        }
        private bool HasChildCategories(Guid parentId)
        {
            var objCategory = _itemCategory.Find(c => c.ParentId == parentId);
            return objCategory != null ? true : false;
        }
        public ActionResult GetSearchItems(object query)
        {
            var hashtable = JsonConvert.DeserializeObject<Hashtable>(JsonConvert.SerializeObject(query));
            int start;
            int.TryParse(hashtable["start"].ToString(), out start);
            int limit;
            int.TryParse(hashtable["limit"].ToString(), out limit);
            var queryparam = hashtable["query"].ToString();

            var filtered = _item.GetAll().AsQueryable().Where(o => o.Code.Contains(queryparam) || o.Name.Contains(queryparam));
            var count = filtered.Count();
            filtered = filtered.OrderBy(o => o.Name).Skip(start).Take(limit);
            var stores = filtered.Select(item => new
            {
                item.Id,
                item.Name,
                item.Code
            });
            return this.Direct(new
            {
                total = count,
                data = stores
            });
        }
        public ActionResult GenerateBarCode(Guid id,string type)
        {
            try
            {
                string fileExtension;
                string filePath="";
                string appPath = HttpContext.Request.ApplicationPath;
                string physicalPath = HttpContext.Request.MapPath(appPath);
                string location = "";
                System.IO.Directory.CreateDirectory(location);
                Barcode barcode = new Barcode();
                var item = _item.Get(o => o.Id == id);
                var barcodeData = item.BarCode != "" && item.BarCode != null ? item.BarCode : item.Code;
                if(type=="QR")
                {
                   location = System.IO.Path.Combine(physicalPath, "Document" + "\\" + "Barcode");
                   filePath = location + "\\" + Path.GetFileName(id.ToString()) + ".png";
              
                    barcode.GenerateQRCode(barcodeData, filePath);              
                }
                else
                {
                    location = System.IO.Path.Combine(physicalPath, "Document" + "\\" + "QrCode");
                    filePath = location + "\\" + Path.GetFileName(id.ToString()) + ".png";            
                    barcode.GenerateBarcode(barcodeData, filePath);         
                }
           
                _context.SaveChanges();

                return this.Direct(new { success = true, data = "Item has been successfully saved!" });
            }
            catch (Exception exception)
            {
                return this.Direct(new { success = false, data = exception.InnerException.Message });
            }
        }
        public ActionResult Delete(Guid id)
        {
           
            _item.Delete(o => o.Id == id);

            return this.Direct(new { success = true, data = "Item has been successfully deleted!" });
        }
        public ActionResult ChangeItemCategory(string itemIds,Guid itemCategoryId)
        {
            try
            {
                var ids = itemIds.Split(',');
                foreach (var id in ids)
                {
                    var itemId = Guid.Empty;
                    Guid.TryParse(id, out itemId);
                    var objItem = _item.Get(o => o.Id == itemId);
                    if (objItem != null)
                    {
                        objItem.ItemCategoryId = itemCategoryId;
                        var code = _item.GenerateItemCode(itemCategoryId, Constants.autoCode_setting_Name);
                        objItem.Code = code != "" ? code : objItem.Code;
                    }
                    _context.SaveChanges();
                }
                _context.SaveChanges();

                return this.Direct(new { success = true, data = "Item has been successfully deleted!" });
            }
            catch (Exception exception)
            {
                return this.Direct(new { success = false, data = exception.InnerException.Message });
            }
        }
        [FormHandler]
        public ActionResult Save(psmsItem item)
        {
            try
            {
                var objitem = _item.Find(i => (i.Name.Equals(item.Name) && i.ItemCategoryId == item.ItemCategoryId && i.Id != item.Id) || ( i.Code.Equals(item.Code) && i.ItemCategoryId == item.ItemCategoryId && i.Id != item.Id));
                if (objitem != null)
                {
                    var result = new { success = false, data = "Item Name or Code has already been registered for this category!" };
                    return this.Direct(result);
                }
                if (Request.Params["IsHazardous"] != null && Request.Params["IsHazardous"].ToString().Equals("on"))
                    item.IsHazardous = true;
                else
                    item.IsHazardous = false;
                if (Request.Params["IsSerialItem"] != null && Request.Params["IsSerialItem"].ToString().Equals("on"))
                    item.IsSerialItem = true;
                else
                    item.IsSerialItem = false;
                if (Request.Params["IsLOTItem"] != null && Request.Params["IsLOTItem"].ToString().Equals("on"))
                    item.IsLOTItem = true;
                else
                    item.IsLOTItem = false;
                if (Request.Params["IsActive"] != null && Request.Params["IsActive"].ToString().Equals("on"))
                    item.IsActive = true;
                else
                    item.IsActive = false;
               
                if (item.Id==Guid.Empty)
                {
                    var code = _item.GenerateItemCode(item.ItemCategoryId, Constants.autoCode_setting_Name);
                    item.Code = code != "" ? code : item.Code;
                    item.Id = Guid.NewGuid();
                    item.CreatedAt = DateTime.Now;
                    item.UpdatedAt = DateTime.Now;
                 
                    _item.AddNew(item);
                }
                else
                {
                    item.UpdatedAt = DateTime.Now;
                    _item.Edit(item);
                }
                return this.Direct(new { success = true, data = "Data has been saved successfully!" });
            }
            catch (Exception exception)
            {
                return this.Direct(new { success = false, data = exception.InnerException != null ? exception.InnerException.Message : exception.Message});
            }
        }
        public void ExportToExcel()
        {
            var searchText = Request.QueryString["st"];

            var records = _item.GetAll().AsQueryable();
            records = searchText != "" ? records.Where(p => p.Name.ToUpper().Contains(searchText.ToUpper()) ||
                p.Code.ToUpper().Contains(searchText.ToUpper()) ||
                p.psmsItemCategory.Name.ToUpper().Contains(searchText.ToUpper())) : records;

            var jobOrders = records.Select(item => new
            {
                item.Id,
                CategoryCode = item.psmsItemCategory.Code,
                item.Name,
                item.Code,
                ItemCategory = item.psmsItemCategory.Name,
                item.ItemSpecification,
                MeasurementUnit = item.lupMeasurementUnit.Name,
                item.Remark,
                ItemType=item.lupItemType.Name
            }).ToList().Select(item => new
            {
                item.Id,
                item.ItemCategory,
                Name = item.CategoryCode + " - " + item.Name,
                item.Code,
                item.MeasurementUnit,
                item.ItemSpecification,
                item.Remark,
                item.ItemType
            });

            var exportToExcelHelper = new ExportToExcelHelper();
            exportToExcelHelper.ToExcel(Response, jobOrders);
        }

        public void ReorderExportToExcel()
        {
            var searchText = Request.QueryString["search"];

            var fiscalYearId = _fiscalYear.GetAll().Where(o => o.IsActive == true && o.IsClosed == false).FirstOrDefault().Id;

            var filtered = _inventoryRecord.GetAll().AsQueryable().Where(i => i.IsClosed == false && i.FiscalYearId == fiscalYearId && i.IsClosed == false && (i.RunningQuantity < i.ReorderLevel || i.RunningQuantity > i.MaximumLevel || i.RunningQuantity < i.MinimumLevel));

            

            filtered = searchText != "" ? filtered.Where(s =>

                s.psmsItem.Code.ToUpper().Contains(searchText.ToUpper()) ||
                s.psmsItem.Name.ToUpper().Contains(searchText.ToUpper()) ||
                s.psmsItem.psmsItemCategory.Name.ToUpper().Contains(searchText.ToUpper()) ||
                s.psmsItem.lupItemType.Name.ToUpper().Contains(searchText.ToUpper()) ||
                s.psmsItem.PartNumber.ToUpper().Contains(searchText.ToUpper()) ||
                s.psmsStore.Name.ToUpper().Contains(searchText.ToUpper()) ||
                s.psmsItem.Brand.ToUpper().Contains(searchText.ToUpper())
                ) : filtered;
          
            var items = filtered.Select(item => new
            {
                Store = item.psmsStore.Name,
                Type = item.RunningQuantity < item.ReorderLevel ? "Reorder Level" : item.RunningQuantity > item.MaximumLevel ? "Maximum Level" : item.RunningQuantity < item.MinimumLevel ? "Minimum Level" : "",
                ItemCategory = item.psmsItem.ItemCategoryId != null ? item.psmsItem.psmsItemCategory.Name : "",
                Name = item.psmsItem.Name,
                Code = item.psmsItem.Code,
                item.ReorderLevel,
                item.RunningQuantity,
                
            }).ToList().OrderBy(o=>o.Store).ThenBy(o=>o.Type);

            var exportToExcelHelper = new ExportToExcelHelper();
            exportToExcelHelper.ToExcel(Response, items);
        }

  
        #endregion
   
        #region Alternative Item
        public ActionResult GetAllAlternvative(int start, int limit, string sort, string dir, string record)
        {
            var hashtable = JsonConvert.DeserializeObject<Hashtable>(record);
            Guid itemId;
            Guid.TryParse(hashtable["itemId"].ToString(), out itemId);
            var searchText = hashtable["searchText"] != null ? hashtable["searchText"].ToString() : "";

            var filtered =_itemAlternative.GetAll().AsQueryable().Where(i => i.ItemId == itemId);

            filtered = searchText != "" ? filtered.Where(s =>

                s.psmsItem1.Code.ToUpper().Contains(searchText.ToUpper()) ||
                s.psmsItem1.Name.ToUpper().Contains(searchText.ToUpper()) ||
                s.psmsItem1.lupItemType.Name.ToUpper().Contains(searchText.ToUpper()) ||
                s.psmsItem1.lupMeasurementUnit.Name.ToUpper().Contains(searchText.ToUpper())) : filtered;
            
            switch (sort)
            {
             
                case "AlternativeItem":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.psmsItem1.Name + " " + u.psmsItem1.Code) : filtered.OrderByDescending(u => u.psmsItem1.Name + " " + u.psmsItem1.Code);
                    break;
                case "Remark":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.Remark) : filtered.OrderByDescending(u => u.Remark);
                    break;
                default:
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.CreatedAt) : filtered.OrderByDescending(u => u.CreatedAt);
                    break;
            }
            var count = filtered.Count();
            filtered = filtered.Skip(start).Take(limit);

            var items = filtered.Select(item => new
            {
                item.Id,
                item.ItemId,
                item.AlternativeItemId,
                AlternativeItem = item.psmsItem1.Name + " " + item.psmsItem1.Code,
                item.Remark,
                item.psmsItem1.PartNumber,
                MeasurementUnit = item.psmsItem1.lupMeasurementUnit.Name,
                item.psmsItem1.InventoryUnit,
                item.CreatedAt
            }).ToList();

         

            var result = new
            {
                total = count,
                data = items
            };
            return this.Direct(result);
        }
        public ActionResult SaveItemAlternative(Guid itemId, string itemAlternativeString)
        {
            using (var transaction = new TransactionScope())
            {
                try
                {

                    IList<psmsItemAlternative> itemAlternativeList = new List<psmsItemAlternative>();
                    var oldItemAlternativeList = _itemAlternative.GetAll().AsQueryable().Where(o => o.ItemId == itemId).ToList();
                    if (itemAlternativeString != "")
                        itemAlternativeString = itemAlternativeString.Remove(itemAlternativeString.Length - 1);
                    else
                    {
                        DeleteAlternativeItem(oldItemAlternativeList, itemAlternativeList);
                        _context.SaveChanges();
                        transaction.Complete();
                        return this.Direct(new { success = true, data = "Data has been saved successfully!" });
                    }
                    IList<string> itemAlternatives = itemAlternativeString.Split(new[] { ';' }).ToList();
             
                    for (var i = 0; i < itemAlternatives.Count(); i++)
                    {
                        var itemAlternative = itemAlternatives[i].Split(new[] { ':' });
                        var itemAlternativeId = Guid.Empty;
                        Guid.TryParse(itemAlternative[0].ToString(), out itemAlternativeId);

                        var objItemAlternative = itemAlternativeId != Guid.Empty ? _itemAlternative.Get(o => o.Id == itemAlternativeId) : new psmsItemAlternative();

                        objItemAlternative.ItemId = itemId;
                        objItemAlternative.AlternativeItemId = Guid.Parse(itemAlternative[1]);
                        objItemAlternative.Remark = itemAlternative[2];
                        objItemAlternative.UpdatedAt = DateTime.Now;

                        if (itemAlternativeId == Guid.Empty)
                        {
                            objItemAlternative.Id = Guid.NewGuid();
                            objItemAlternative.CreatedAt = DateTime.Now;
                            _itemAlternative.AddNew(objItemAlternative);
                        }
                        itemAlternativeList.Add(objItemAlternative);
                    }
                    DeleteAlternativeItem(oldItemAlternativeList, itemAlternativeList);
                    _context.SaveChanges();
                    transaction.Complete();
                    return this.Direct(new { success = true, data = "Data has been added successfully!" });

                }
                catch (Exception exception)
                {
                    return this.Direct(new { success = false, data = exception.Message });
                }
            }
           
         
        }
        public void DeleteAlternativeItem(List<psmsItemAlternative> oldItemAlternativeList, IList<psmsItemAlternative> itemAlternativeList)
        {
             foreach (var objoldsItemAlternative in oldItemAlternativeList)
            {
                var record = itemAlternativeList.Where(o => o.Id == objoldsItemAlternative.Id);

                if (record.Count() == 0)
                {
                    _itemAlternative.Delete(o => o.Id == objoldsItemAlternative.Id);
                }
            }
        }

        #endregion
   
        #region Unit Item
        public ActionResult GetAllItemUnit(int start, int limit, string sort, string dir, string record)
        {
            var hashtable = JsonConvert.DeserializeObject<Hashtable>(record);
            Guid itemId;
            Guid.TryParse(hashtable["itemId"].ToString(), out itemId);
            var searchText = hashtable["searchText"] != null ? hashtable["searchText"].ToString() : "";

            var filtered = _itemUnit.GetAll().AsQueryable().Where(i => i.ItemId == itemId);

            filtered = searchText != "" ? filtered.Where(s =>

                s.lupMeasurementUnit.Code.ToUpper().Contains(searchText.ToUpper()) ||
                s.lupMeasurementUnit.Name.ToUpper().Contains(searchText.ToUpper()) ) : filtered;

            switch (sort)
            {
               
                case "MeasurementUnit":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.lupMeasurementUnit.Name) : filtered.OrderByDescending(u => u.lupMeasurementUnit.Name);
                    break;
                case "ConversionRate":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.ConversionRate) : filtered.OrderByDescending(u => u.ConversionRate);
                    break;
          
                case "Remark":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.Remark) : filtered.OrderByDescending(u => u.Remark);
                    break;
                default:
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.CreatedAt) : filtered.OrderByDescending(u => u.CreatedAt);
                    break;
            }
            var count = filtered.Count();
            filtered = filtered.Skip(start).Take(limit);


            var items = filtered.Select(item => new
            {
                item.Id,
                item.ItemId,
                item.MeasurementUnitId,
                item.ConversionRate,
                MeasurementUnit=item.lupMeasurementUnit.Name,
                item.Remark,               
                item.CreatedAt
            }).ToList();

         
            var result = new
            {
                total = count,
                data = items
            };
            return this.Direct(result);
        }
        public ActionResult SaveItemUnit(Guid itemId, string itemUnitString)
        {
            using (var transaction = new TransactionScope())
            {
                try
                {

                    IList<psmsItemUnit> itemUnitList = new List<psmsItemUnit>();
                    var oldItemUnitList = _itemUnit.GetAll().AsQueryable().Where(o => o.ItemId == itemId).ToList();
                    if (itemUnitString != "")
                        itemUnitString = itemUnitString.Remove(itemUnitString.Length - 1);
                    else
                    {
                        DeleteItemUnit(oldItemUnitList, itemUnitList);
                        _context.SaveChanges();
                        transaction.Complete();
                        return this.Direct(new { success = true, data = "Data has been saved successfully!" });
                    }
                    IList<string> itemUnits = itemUnitString.Split(new[] { ';' }).ToList();
                 

                    for (var i = 0; i < itemUnits.Count(); i++)
                    {
                        var itemUnit = itemUnits[i].Split(new[] { ':' });
                        var itemUnitId = Guid.Empty;
                        Guid.TryParse(itemUnit[0].ToString(), out itemUnitId);

                        var objItemUnit = itemUnitId != Guid.Empty ? _itemUnit.Get(o => o.Id == itemUnitId) : new psmsItemUnit();

                        objItemUnit.ItemId = itemId;
                        objItemUnit.MeasurementUnitId = Guid.Parse(itemUnit[1]);
                        objItemUnit.ConversionRate =decimal.Parse( itemUnit[2]);
                        objItemUnit.Remark = itemUnit[3];
                        objItemUnit.UpdatedAt = DateTime.Now;

                        if (itemUnitId == Guid.Empty)
                        {
                            objItemUnit.Id = Guid.NewGuid();
                            objItemUnit.CreatedAt = DateTime.Now;
                            _itemUnit.AddNew(objItemUnit);
                        }
                        itemUnitList.Add(objItemUnit);
                    }
                    DeleteItemUnit(oldItemUnitList, itemUnitList);
                    _context.SaveChanges();
                    transaction.Complete();
                    return this.Direct(new { success = true, data = "Data has been added successfully!" });

                }
                catch (Exception exception)
                {
                    return this.Direct(new { success = false, data = exception.Message });
                }
            }


        }
        public void DeleteItemUnit(List<psmsItemUnit> oldItemUnitList, IList<psmsItemUnit> itemUnitList)
        {
            foreach (var objoldsItemUnit in oldItemUnitList)
            {
                var record = itemUnitList.Where(o => o.Id == objoldsItemUnit.Id);

                if (record.Count() == 0)
                {
                    _itemUnit.Delete(o => o.Id == objoldsItemUnit.Id);
                }
            }
        }

        #endregion

        #region Package Item
        public ActionResult GetAllItemPackage(int start, int limit, string sort, string dir, string record)
        {
            var hashtable = JsonConvert.DeserializeObject<Hashtable>(record);
            Guid itemId;
            Guid.TryParse(hashtable["itemId"].ToString(), out itemId);
            var searchText = hashtable["searchText"] != null ? hashtable["searchText"].ToString() : "";

            var filtered =_itemPackage.GetAll().AsQueryable().Where(i => i.ItemId == itemId);

            filtered = searchText != "" ? filtered.Where(s =>

                s.psmsItem1.Code.ToUpper().Contains(searchText.ToUpper()) ||
                s.psmsItem1.Name.ToUpper().Contains(searchText.ToUpper()) ||
                s.psmsItem1.lupItemType.Name.ToUpper().Contains(searchText.ToUpper()) ||
                s.psmsItem1.lupMeasurementUnit.Name.ToUpper().Contains(searchText.ToUpper())) : filtered;

            switch (sort)
            {

                case "PackageItem":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.psmsItem1.Name + " " + u.psmsItem1.Code) : filtered.OrderByDescending(u => u.psmsItem1.Name + " " + u.psmsItem1.Code);
                    break;
                case "Remark":
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.Remark) : filtered.OrderByDescending(u => u.Remark);
                    break;
                default:
                    filtered = dir == "ASC" ? filtered.OrderBy(u => u.CreatedAt) : filtered.OrderByDescending(u => u.CreatedAt);
                    break;
            }
            var count = filtered.Count();
            filtered = filtered.Skip(start).Take(limit);

            var items = filtered.Select(item => new
            {
                item.Id,
                item.ItemId,
                item.PackageItemId,
                PackageItem = item.psmsItem1.Name + " " + item.psmsItem1.Code,
                item.Quantity,
                item.Remark,
                item.UnitId,
                Unit=item.UnitId.HasValue?item.lupMeasurementUnit.Name:"",
                item.psmsItem1.PartNumber,
                MeasurementUnit = item.psmsItem1.lupMeasurementUnit.Name,
                item.psmsItem1.InventoryUnit,
                item.CreatedAt
            }).ToList();



            var result = new
            {
                total = count,
                data = items
            };
            return this.Direct(result);
        }
        public ActionResult SaveItemPackage(Guid itemId, string itemPackageString)
        {
            using (var transaction = new TransactionScope())
            {
                try
                {

                    IList<psmsItemPackage> itemPackageList = new List<psmsItemPackage>();
                    var oldItemPackageList =_itemPackage.GetAll().AsQueryable().Where(o => o.ItemId == itemId).ToList();
                    if (itemPackageString != "")
                        itemPackageString = itemPackageString.Remove(itemPackageString.Length - 1);
                    else
                    {
                        DeleteItemPackage(oldItemPackageList, itemPackageList);
                        _context.SaveChanges();
                        transaction.Complete();
                        return this.Direct(new { success = true, data = "Data has been saved successfully!" });
                    }
                    IList<string> itemPackages = itemPackageString.Split(new[] { ';' }).ToList();

                    for (var i = 0; i < itemPackages.Count(); i++)
                    {
                        var itemPackage = itemPackages[i].Split(new[] { ':' });
                        var itemPackageId = Guid.Empty;
                        Guid.TryParse(itemPackage[0].ToString(), out itemPackageId);

                        var objItemPackage = itemPackageId != Guid.Empty ? oldItemPackageList.Where(o => o.Id == itemPackageId).FirstOrDefault(): new psmsItemPackage();

                        objItemPackage.ItemId = itemId;
                        objItemPackage.PackageItemId = Guid.Parse(itemPackage[1]);
                        objItemPackage.Remark = itemPackage[2];
                        objItemPackage.Quantity =decimal.Parse( itemPackage[3]);
                        objItemPackage.UnitId = Guid.Parse(itemPackage[4]);
                        objItemPackage.UpdatedAt = DateTime.Now;

                        if (itemPackageId == Guid.Empty)
                        {
                            objItemPackage.Id = Guid.NewGuid();
                            objItemPackage.CreatedAt = DateTime.Now;
                           _itemPackage.AddNew(objItemPackage);
                        }
                        itemPackageList.Add(objItemPackage);
                    }
                    DeleteItemPackage(oldItemPackageList, itemPackageList);
                    _context.SaveChanges();
                    transaction.Complete();
                    return this.Direct(new { success = true, data = "Data has been added successfully!" });

                }
                catch (Exception exception)
                {
                    return this.Direct(new { success = false, data = exception.Message });
                }
            }


        }
        public void DeleteItemPackage(List<psmsItemPackage> oldItemPackageList, IList<psmsItemPackage> itemPackageList)
        {
            foreach (var objoldsItemAlternative in oldItemPackageList)
            {
                var record = itemPackageList.Where(o => o.Id == objoldsItemAlternative.Id);

                if (record.Count() == 0)
                {
                    _itemAlternative.Delete(o => o.Id == objoldsItemAlternative.Id);
                }
            }
        }

        #endregion
    }
}
